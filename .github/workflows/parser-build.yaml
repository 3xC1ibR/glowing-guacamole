name: deploy parser

on:
  # run manually, for prod deployments
  workflow_dispatch:

  push:
    branches:
      - 'parser/**'
    paths:
      - '.github/workflows/parser-build.yaml'
      - 'services/parser-service/**'

env:
  SERVICE_NAME: 'parser-service'
  SERVICE_PATH: 'services/parser-service'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v3

    - name: Dump GitHub context
      id: github_context_step
      run: echo '${{ toJSON(github) }}'
    - name: Dump job context
      run: echo '${{ toJSON(job) }}'
    - name: Dump steps context
      run: echo '${{ toJSON(steps) }}'
    - name: Dump runner context
      run: echo '${{ toJSON(runner) }}'
    - name: Dump strategy context
      run: echo '${{ toJSON(strategy) }}'
    - name: Dump matrix context
      run: echo '${{ toJSON(matrix) }}'

    - name: description
      id: get_service_description
      uses: mikefarah/yq@master
      with:
        cmd: yq '.description' 'services/parser-service/version.yaml'

    - name: version
      id: get_version
      uses: mikefarah/yq@master
      with:
        cmd: yq '.version' 'services/parser-service/version.yaml'

    - name: version notes
      id: get_version_notes
      uses: mikefarah/yq@master
      with:
        cmd: yq '.version_notes' 'services/parser-service/version.yaml'

    - name: set variables
      run: |
        if ${{ github.event_name == 'workflow_dispatch' }}; then
          echo "ENV=prod" >> $GITHUB_ENV
        else
          echo "ENV=dev" >> $GITHUB_ENV
        fi

    - name: echo
      run: |
        echo '...building'
        echo $ENV

    - name: setup python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: deploy
      run: |
        python .github/workflows/deploy.py --env $ENV
        echo "endpoint=$(cat somefile)" >> $GITHUB_ENV

    outputs:
      version: ${{ steps.get_version.outputs.result }}
      version_notes: ${{ steps.get_version_notes.outputs.result }}
      service_description: ${{ steps.get_service_description.outputs.result }}
      endpoint: ${{ env.endpoint }}

  deploy:
    permissions:
      deployments: write
      contents: write

    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: release vars
        run: |
          echo "version=${{ steps.get_service_version.outputs.result }}" >> $GITHUB_ENV
          echo "tag=${{ env.SERVICE_NAME}}/$(cat $SERVICE_PATH/version)" >> $GITHUB_ENV
          if ${{ github.event_name == 'workflow_dispatch' }}; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
          fi


      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          environment: ${{ env.ENV }}
          payload: '{"endpoint": "${{ needs.build.outputs.endpoint }}", "service": "${{ env.SERVICE_NAME }}", "version":"${{ needs.build.outputs.version }}", "version_notes": "${{ needs.build.outputs.version_notes}}" }'
          production-environment: github.event_name == 'workflow_dispatch'
          description: ${{ needs.build.outputs.service_description }}
          auto-inactive: github.event_name == 'workflow_dispatch'
          initial-status: success


      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          title: "${{ env.SERVICE_NAME }}/${{ needs.build.outputs.version }}"
          automatic_release_tag: "${{ env.SERVICE_NAME}}/${{ needs.build.outputs.version }}"
          prerelease: false

#      - uses: google-github-actions/release-please-action@v3
#        with:
#          release-type: simple
#          package-name: "${{ env.SERVICE_NAME }}/${{ needs.build.outputs.version }} foobar"

      - name: deploy ${{ needs.build.outputs.version }}
        run: |
          echo "======================== Your application is available at: ========================"
          echo 'done'
          echo "${{ needs.build.outputs.version }}"
          echo "==================================================================================="
